#!/usr/bin/env python
import os, sys
import mpi4py
import numpy as np
from distutils.core import setup, Extension
from os.path import exists, abspath, dirname, join


class CMakeExtension(Extension):
    def __init__(self, name, cmake_lists_dir='.', **kwa):
        Extension.__init__(self, name, sources=[], **kwa)
        self.cmake_lists_dir = os.path.abspath(cmake_lists_dir)

class cmake_build_ext(build_ext):
    def build_extensions(self):
        # Ensure that CMake is present and working
        try:
            out = subprocess.check_output(['cmake', '--version'])
        except OSError:
            raise RuntimeError('Cannot find CMake executable')

        for ext in self.extensions:

            extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
            cfg = 'Debug' if options['--debug'] == 'ON' else 'Release'

            cmake_args = [
                '-DCMAKE_BUILD_TYPE=%s' % cfg,
                # Ask CMake to place the resulting library in the directory
                # containing the extension
                '-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir),
                # Other intermediate static libraries are placed in a
                # temporary build directory instead
                '-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), self.build_temp),
                # Hint CMake to use the same Python executable that
                # is launching the build, prevents possible mismatching if
                # multiple versions of Python are installed
                '-DPYTHON_EXECUTABLE={}'.format(sys.executable),
                # Add other project-specific CMake arguments if needed
                # ...
            ]

            # We can handle some platform-specific settings at our discretion
            if platform.system() == 'Windows':
                plat = ('x64' if platform.architecture()[0] == '64bit' else 'Win32')
                cmake_args += [
                    # These options are likely to be needed under Windows
                    '-DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE',
                    '-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_{}={}'.format(cfg.upper(), extdir),
                ]
                # Assuming that Visual Studio and MinGW are supported compilers
                if self.compiler.compiler_type == 'msvc':
                    cmake_args += [
                        '-DCMAKE_GENERATOR_PLATFORM=%s' % plat,
                    ]
                else:
                    cmake_args += [
                        '-G', 'MinGW Makefiles',
                    ]

            cmake_args += cmake_cmd_args

            if not os.path.exists(self.build_temp):
                os.makedirs(self.build_temp)

            # Config
            subprocess.check_call(['cmake', ext.cmake_lists_dir] + cmake_args,
                                  cwd=self.build_temp)

            # Build
            subprocess.check_call(['cmake', '--build', '.', '--config', cfg],
                                  cwd=self.build_temp)


if sys.platform == 'darwin':
    HDF5_INCDIR = os.environ.get("HDF5_INCDIR", "/usr/local/hdf5/include")
    HDF5_LIBDIR = os.environ.get("HDF5_LIBDIR", "/usr/local/hdf5/lib")
    HDF5_LIB    = os.environ.get("HDF5_LIB", "hdf5")
    MPI_LIBDIR  = os.environ.get("MPI_LIBDIR", "/usr/local/Cellar/mpich/3.2_2/lib")
    MPI_INCDIR  = os.environ.get("MPI_INCDIR", "/usr/local/Cellar/mpich/3.2_2/include")
    MPI_LIB     = os.environ.get("MPI_LIB", "mpich")
    NUMPY_INCDIR= np.get_include()
    MPI4PY_INCDIR=mpi4py.get_include()
    extra_compile_args = ["-std=c++11",
                          "-stdlib=libc++",	
                          "-mmacosx-version-min=10.9",
                          "-UNDEBUG",
                          "-I"+HDF5_INCDIR,
                          "-I"+MPI_INCDIR,
                          "-I"+NUMPY_INCDIR,
                          "-I"+MPI4PY_INCDIR,
                          "-Iinclude", "-Iinclude/cell", "-Iinclude/graph", "-Iinclude/ngraph",
                          "-Iinclude/data", "-Iinclude/mpi", "-Iinclude/hdf5",
                          "-g"]
    extra_link_args=["-L"+HDF5_LIBDIR, "-L"+MPI_LIBDIR]
    libraries = [HDF5_LIB, MPI_LIB]
else:
    HDF5_INCDIR = os.environ.get("HDF5_INCDIR", "/usr/include/hdf5/mpich")
    HDF5_LIBDIR = os.environ.get("HDF5_LIBDIR", "/usr/lib")
    HDF5_LIB    = os.environ.get("HDF5_LIB", "hdf5_mpich")
    MPI_INCDIR  = os.environ.get("MPI_INCDIR", "/usr/include/mpich")
    MPI_LIBDIR  = os.environ.get("MPI_LIBDIR", "/usr/lib")
    MPI_LIB     = os.environ.get("MPI_LIB", "mpich")
    NUMPY_INCDIR= os.environ.get("NUMPY_INCDIR", np.get_include())
    MPI4PY_INCDIR=os.environ.get("MPI4PY_INCDIR", mpi4py.get_include())
    extra_compile_args = ["-std=c++11",
                        "-UNDEBUG",
                        "-I"+HDF5_INCDIR,
                        "-I"+NUMPY_INCDIR,
                        "-I"+MPI4PY_INCDIR,
                        "-Iinclude", "-Iinclude/cell", "-Iinclude/graph", "-Iinclude/ngraph",
                        "-Iinclude/data", "-Iinclude/mpi", "-Iinclude/lowio",
                        "-g"]
    extra_link_args = ["-L"+HDF5_LIBDIR]
    if MPI_LIBDIR != "":
        extra_link_args = extra_link_args + ["-L"+MPI_LIBDIR]
    if MPI_INCDIR != "":
        extra_compile_args = extra_compile_args + ["-I"+MPI_INCDIR]
    if MPI_LIB != "":
        libraries = [HDF5_LIB, MPI_LIB]
    else:
        libraries = [HDF5_LIB]

setup(
    name='NeuroH5',
    package_dir = {'': 'python'},
    packages = ["neuroh5"],
    version='@NEUROH5_VERSION@',
    maintainer = "Ivan Raikov",
    maintainer_email = "ivan.g.raikov@gmail.com",
    description = "NeuroH5 library",
    url = "http://github.com/iraikov/neuroh5",
    include_package_data=True,
    install_requires=[
        'click', 'h5py', 'numpy', 'mpi4py'
    ],
    entry_points='''
        [console_scripts]
        initrange=neuroh5.initrange:cli
        initprj=neuroh5.initprj:cli
        importdbs=neuroh5.importdbs:cli
        importcoords=neuroh5.importcoords:cli
    ''',
    cmdclass = {'build_ext': cmake_build_ext},
    ext_modules = [
        Extension('neuroh5.io',
                  sources = [
                      'python/neuroh5/iomodule.cc',
                      'src/data/append_rank_tree_map.cc',
                      'src/data/attr_map.cc',
                      'src/data/attr_val.cc',
                      'src/data/serialize_edge.cc',
                      'src/data/serialize_tree.cc',
                      'src/data/serialize_cell_attributes.cc',
                      'src/data/append_rank_edge_map.cc',
                      'src/data/append_edge_map.cc',
                      'src/data/append_edge_map_selection.cc',
                      'src/data/append_rank_attr_map.cc',
                      'src/data/tokenize.cc',
                      'src/data/range_sample.cc',
                      'src/cell/read_tree.cc',
                      'src/cell/cell_populations.cc',
                      'src/cell/validate_tree.cc',
                      'src/cell/contract_tree.cc',
                      'src/cell/scatter_read_tree.cc',
                      'src/cell/cell_index.cc',
                      'src/cell/cell_attributes.cc',
                      'src/cell/append_tree.cc',
                      'src/graph/scatter_read_graph.cc',
                      'src/graph/edge_attributes.cc',
                      'src/graph/read_graph.cc',
                      'src/graph/read_graph_selection.cc',
                      'src/graph/write_projection.cc',
                      'src/graph/read_projection.cc',
                      'src/graph/read_projection_selection.cc',
                      'src/graph/scatter_read_projection.cc',
                      'src/graph/projection_names.cc',
                      'src/graph/merge_edge_map.cc',
                      'src/graph/validate_edge_list.cc',
                      'src/graph/validate_selection_edge_list.cc',
                      'src/graph/balance_graph_indegree.cc',
                      'src/graph/node_attributes.cc',
                      'src/graph/compute_vertex_metrics.cc',
                      'src/graph/vertex_degree.cc',
                      'src/graph/bcast_graph.cc',
                      'src/graph/write_graph.cc',
                      'src/graph/append_graph.cc',
                      'src/graph/append_projection.cc',
                      'src/mpi/rank_range.cc',
                      'src/mpi/mpe_seq.cc',
                      'src/lowio/num_projection_blocks.cc',
                      'src/lowio/dataset_num_elements.cc',
                      'src/lowio/read_link_names.cc',
                      'src/lowio/read_projection_datasets.cc',
                      'src/lowio/read_projection_dataset_selection.cc',
                      'src/lowio/attr_kind_datatype.cc',
                      'src/lowio/exists_dataset.cc',
                      'src/lowio/exists_group.cc',
                      'src/lowio/exists_h5types.cc',
                      'src/lowio/copy_h5types.cc',
                      'src/lowio/create_file_toplevel.cc',
                      'src/lowio/path_names.cc',
                      'src/lowio/group_contents.cc',
                      'src/lowio/dataset_type.cc',
                      'src/lowio/create_group.cc',
                      'src/lowio/file_access.cc'
                  ])
        ]
    )



